#!/bin/bash

readonly d="$(cd "$(dirname "$0")" || exit ; pwd)"
readonly tools="${d}/../tools.sh"

log() {
    echo >&2 "$(basename "$0"): $*"
}

# 指定した kubernetes バージョンの標準のリソースのドキュメントへのリンクを作るために必要
# $1: kubernetes バージョン
generate_config() {
    local -r version="$1"
    cat <<EOS
render:
  kubernetesVersion: ${version}
EOS
}

docs() {
    "$tools" crd-ref-docs "$@"
}

pandoc() {
    "$tools" pandoc "$@"
}

generate_examples() {
    "${d}/examples/generate.sh"
}

# CRD からドキュメントを生成する
# $1: crd-ref-docs の設定ファイル
# $2: CRD の go ファイルのディレクトリ
# $3: 出力先ファイル
generate_docs() {
    local -r __config="$1"
    local -r __source="$2"
    local -r __output="$3"
    docs \
        --config="$__config" \
        --source-path="$__source" \
        --output-mode single \
        --renderer markdown \
        --output-path "$__output"
}

# 純粋に CRD から生み出された markdown の1つめの見出しのすぐ下に概要とマニフェスト例をつっこむ
# $1: markdown ファイル
insert_summary_and_examples() {
    local -r __out_md="$1"
    # 生成された markdown であることをコメントする
    echo '<!-- Generated by tool. DO NOT EDIT. -->'
    # 1つめの見出し
    head -n 1 "$__out_md"
    # 概要(日本語)
    cat <<EOS
複数の似ている [Job](https://kubernetes.io/ja/docs/concepts/workloads/controllers/job/) や [CronJob](https://kubernetes.io/ja/docs/concepts/workloads/controllers/cron-jobs/) のマニフェストを, 共通部分と差分のペアの形式で効率的に生成するためのカスタムリソースです.

- [CRD PodProfile](#podprofile) は Pod の Spec を共通部分として定義できます.
- [CRD Job](#job) は [Job](https://kubernetes.io/ja/docs/concepts/workloads/controllers/job/) を生成できます. これは [Job](https://kubernetes.io/ja/docs/concepts/workloads/controllers/job/) のパラメータと [CRD PodProfile](#podprofile) に対するパッチを含みます.
- [CRD CronJob](#cronjob) は [CronJob](https://kubernetes.io/ja/docs/concepts/workloads/controllers/cron-jobs/) を生成できます. これは [CronJob](https://kubernetes.io/ja/docs/concepts/workloads/controllers/cron-jobs/) のパラメータと [CRD PodProfile](#podprofile) に対するパッチを含みます.
EOS
    # 改行しないとexamplesの見出しが消える
    echo
    # マニフェストの例
    generate_examples
    # 残り
    tail -n +2 "$__out_md"
}

# CSS ファイルを生成する
# $1: 外部 CSS ファイルの URL
# $2: ローカル CSS ファイル
generate_css() {
    local -r __url="$1"
    local -r __file="$2"
    curl -o- -s -L "$__url"
    cat "$__file"
}

# markdown を html に変換する
# $1: markdown ファイル
# $2: CSS ファイル
# $3: ページのタイトル
generate_html() {
    local -r __out_md="$1"
    local -r __css="$2"
    local -r __title="$3"
    pandoc \
        "${__out_md}" \
        --standalone \
        --embed-resources \
        --toc \
        --toc-depth=4 \
        --css "${__css}" \
        --metadata title="${__title}"
}

generate_script() {
    local -r __js="$1"
    echo "<script>"
    cat "${__js}"
    echo "</script>"
}

set -e
set -o pipefail

readonly dest="$1"
readonly k8s_version="$2"
if [[ -z "$dest" ]] ; then
    log "dest (\$1) is required!"
    exit 1
fi
if [[ -z "$k8s_version" ]] ; then
    log "k8s_version (\$2) is required!"
    exit 1
fi

readonly title="CRD of pixiv.net"
readonly source_path="${d}/../../api/v1"
# ベースにする CSS
readonly css_url="http://thomasf.github.io/solarized-css/solarized-light.min.css"
# 追加の CSS
readonly css_file="${d}/docs.css"
# 追加の JS
readonly js_file="${d}/docs.js"


readonly config="$(mktemp)"
generate_config "${k8s_version}" > "$config"
readonly css="$(mktemp)"
generate_css "${css_url}" "${css_file}" > "${css}"

docs --version
readonly tmp_out_md="$(mktemp)"
generate_docs "${config}" "${source_path}" "${tmp_out_md}"
readonly out_md="${d}/docs.md"
insert_summary_and_examples "${tmp_out_md}" > "${out_md}"
generate_script "${js_file}" >> "${out_md}"
generate_html "${out_md}" "${css}" "${title}" > "${dest}"
